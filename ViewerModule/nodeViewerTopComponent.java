/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.SpaceEngineDatabase.ViewerModule;

import SEdbLib.Cluster;
import SEdbLib.Galaxy;
import SEdbLib.InsertManager;
import SEdbLib.Nebula;
import SEdbLib.Planet;
import SEdbLib.Star;
import SEdbLib.UserManager;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.net.URL;
import java.util.Collection;
import javax.imageio.ImageIO;
import javax.swing.JPanel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.SpaceEngineDatabase.ViewerModule//nodeViewer//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "nodeViewerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "org.SpaceEngineDatabase.ViewerModule.nodeViewerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_nodeViewerAction",
        preferredID = "nodeViewerTopComponent")
@Messages({
    "CTL_nodeViewerAction=nodeViewer",
    "CTL_nodeViewerTopComponent=nodeViewer Window",
    "HINT_nodeViewerTopComponent=This is a nodeViewer window"
})
public final class nodeViewerTopComponent extends TopComponent implements LookupListener {
    public nodeViewerTopComponent() {
        initComponents();
        setName(Bundle.CTL_nodeViewerTopComponent());
        setToolTipText(Bundle.HINT_nodeViewerTopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();

        jTextField1.setEditable(false);
        jTextField1.setText(org.openide.util.NbBundle.getMessage(nodeViewerTopComponent.class, "nodeViewerTopComponent.jTextField1.text")); // NOI18N

        jTextField2.setEditable(false);
        jTextField2.setText(org.openide.util.NbBundle.getMessage(nodeViewerTopComponent.class, "nodeViewerTopComponent.jTextField2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(nodeViewerTopComponent.class, "nodeViewerTopComponent.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(nodeViewerTopComponent.class, "nodeViewerTopComponent.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(nodeViewerTopComponent.class, "nodeViewerTopComponent.jLabel3.text")); // NOI18N

        jTextField3.setEditable(false);
        jTextField3.setText(org.openide.util.NbBundle.getMessage(nodeViewerTopComponent.class, "nodeViewerTopComponent.jTextField3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(nodeViewerTopComponent.class, "nodeViewerTopComponent.jLabel4.text")); // NOI18N

        jTextField4.setText(org.openide.util.NbBundle.getMessage(nodeViewerTopComponent.class, "nodeViewerTopComponent.jTextField4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(nodeViewerTopComponent.class, "nodeViewerTopComponent.jButton1.text")); // NOI18N
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(nodeViewerTopComponent.class, "nodeViewerTopComponent.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(nodeViewerTopComponent.class, "nodeViewerTopComponent.jLabel6.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(nodeViewerTopComponent.class, "nodeViewerTopComponent.jLabel7.text")); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(28, 28, 28)
                        .addComponent(jTextField4))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jButton1)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6)
                            .addComponent(jTextField2)
                            .addComponent(jTextField1)
                            .addComponent(jTextField3)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(73, 73, 73)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addComponent(jScrollPane2))
                .addGap(27, 27, 27))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      InsertManager im = new InsertManager();
      boolean debug = false;
      if(gal != null)
      {   gal.setObserv(jTextArea1.getText());
          gal.setImgUrl(jTextField4.getText());
          im.g = gal;
          if(debug)System.out.println("Gal update");
       }
      else if(neb != null)
      {   neb.setObservations(jTextArea1.getText());
          neb.setImgUrl(jTextField4.getText());  
          im.n = neb;
          if(debug)System.out.println("Neb update");}
      else if(clu != null)
      {   clu.setObservations(jTextArea1.getText());
          clu.setImgUrl(jTextField4.getText());
          im.c = clu;
          if(debug)System.out.println("Clu update");}
      else if(sta != null)
      {   sta.setObservations(jTextArea1.getText());
          sta.setImgUrl(jTextField4.getText());
          im.s = sta;
          if(debug)System.out.println("Sta update");}
      else if(pla != null)
      {   pla.setObservations(jTextArea1.getText());
          pla.setImgUrl(jTextField4.getText());
          im.p = pla;
          if(debug)System.out.println("Pla update");}
      im.Update();
      gal = null;
      neb = null;
      clu = null;
      sta = null;
      pla = null;
    }//GEN-LAST:event_jButton1ActionPerformed

        @Override
    public boolean canClose()
    {return false;}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
    private Lookup.Result<Galaxy> Gresult = null;
    private Lookup.Result<Nebula> Nresult = null;
    private Lookup.Result<Cluster> Cresult = null;
    private Lookup.Result<Star> Sresult = null;
    private Lookup.Result<Planet> Presult = null;
    TopComponent tc;
    Lookup tcLookup;
    UserManager um;
    Galaxy gal = null;
    Cluster clu = null;
    Nebula neb = null;
    Star sta = null;
    Planet pla = null;
    imagePanel ip = null;
    
    
    @Override
    public void componentOpened() {
        Gresult = Utilities.actionsGlobalContext().lookupResult(Galaxy.class);
        Gresult.addLookupListener (this);
        Nresult = Utilities.actionsGlobalContext().lookupResult(Nebula.class);
        Nresult.addLookupListener (this);
        Cresult = Utilities.actionsGlobalContext().lookupResult(Cluster.class);
        Cresult.addLookupListener (this);
        Sresult = Utilities.actionsGlobalContext().lookupResult(Star.class);
        Sresult.addLookupListener (this);
        Presult = Utilities.actionsGlobalContext().lookupResult(Planet.class);
        Presult.addLookupListener (this);
    }

    @Override
    public void componentClosed() {
        Gresult.removeLookupListener(this);
        Nresult.removeLookupListener(this);
        Cresult.removeLookupListener(this);
        Sresult.removeLookupListener(this);
        Presult.removeLookupListener(this);
    }
    
     @Override
    public void resultChanged(LookupEvent lookupEvent) {
        Collection<? extends Nebula> NallEvents = Nresult.allInstances();
        Collection<? extends Galaxy> GallEvents = Gresult.allInstances();
        Collection<? extends Cluster> CallEvents = Cresult.allInstances();
        Collection<? extends Star> SallEvents = Sresult.allInstances();
        Collection<? extends Planet> PallEvents = Presult.allInstances();
        this.setVisible(true);
        jTextField4.setVisible(false);jLabel4.setVisible(false);jTextArea1.setEnabled(false);
        if (!GallEvents.isEmpty()) {
            gal = GallEvents.iterator().next();
            jTextField1.setText(gal.getName());
            jTextField2.setText(gal.getDiscoverer().getUser());
            jTextField3.setText(gal.getDate().toString());
            jTextField4.setText(gal.getImgUrl());
            jTextArea1.setText(gal.getObserv());
            jLabel6.setText("Galaxy");
            neb = null;
            clu = null;
            sta = null;
            pla = null;
        }
        else if (!NallEvents.isEmpty()) {
            neb = NallEvents.iterator().next();
            jTextField1.setText(neb.getName());
            jTextField2.setText(neb.getDiscoverer().getUser());
            jTextField3.setText(neb.getDiscdate().toString());
            jTextField4.setText(neb.getImgUrl());
            jTextArea1.setText(neb.getObservations());
            jLabel6.setText("Nebula");
            gal = null;
            clu = null;
            sta = null;
            pla = null;
        }
        else if (!CallEvents.isEmpty()) {
            clu = CallEvents.iterator().next();
            jTextField1.setText(clu.getName());
            jTextField2.setText(clu.getDiscoverer().getUser());
            jTextField3.setText(clu.getDiscdate().toString());
            jTextField4.setText(clu.getImgUrl());
            jTextArea1.setText(clu.getObservations());
            jLabel6.setText("Cluster");
            gal = null;
            neb = null;
            sta = null;
            pla = null;
        }
        else if (!SallEvents.isEmpty()) {
            sta = SallEvents.iterator().next();
            jTextField1.setText(sta.getName());
            jTextField2.setText(sta.getDiscoverer().getUser());
            jTextField3.setText(sta.getDate().toString());
            jTextField4.setText(sta.getImgUrl());
            jTextArea1.setText(sta.getObservations());
            gal = null;
            neb = null;
            clu = null;
            pla = null;
            if(!sta.getIsBary()){jLabel6.setText("Star");}
            else{jLabel6.setText("Barycenter");}
        }
        else if (!PallEvents.isEmpty()) {
            pla = PallEvents.iterator().next();
            jTextField1.setText(pla.getName());
            jTextField2.setText(pla.getDiscoverer().getUser());
            jTextField3.setText(pla.getDate().toString());
            jTextField4.setText(pla.getImgUrl());
            jTextArea1.setText(pla.getObservations());
            gal = null;
            neb = null;
            clu = null;
            sta = null;
            if(!pla.getIsAsteroid()&&!pla.getIsmoon()){
            jLabel6.setText("Planet");}
            else if(!pla.getIsmoon()){
                jLabel6.setText("Asteroid");}
            else{jLabel6.setText("Moon");
            }}
        BufferedImage img = null;
        try{img = ImageIO.read(new URL(jTextField4.getText()));
            ip = new imagePanel(img);
            System.out.println("Got image!");
        }
        catch(Exception e)
        {//System.out.println("No such image");
        jScrollPane2.setViewportView(null);
        jScrollPane2.repaint();}
        if(img != null){
            jScrollPane2.setViewportView(ip);
            jScrollPane2.repaint();
            //System.out.println("Image on!");   
        }
        tc = WindowManager.getDefault().findTopComponent("SEFormTopComponent");
        tcLookup = tc.getLookup();
        um = tcLookup.lookup(UserManager.class);
        if(jTextField2.getText().equals(um.getNick()) && um.getLog())
        {jButton1.setEnabled(true);
        jTextField4.setVisible(true);jLabel4.setVisible(true);jTextArea1.setEnabled(true);
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}

class imagePanel extends JPanel{
   private BufferedImage image;  
   private int initWidth, initHeight;
   private AffineTransform at = new AffineTransform();
    
    public imagePanel(BufferedImage image) {  
      this.image = image;  
      initWidth = image.getWidth();  
      initHeight = image.getHeight();  
      setPreferredSize(new Dimension(initWidth, initHeight));  
   }
    
    @Override  
    protected void paintComponent(Graphics g) {  
      super.paintComponent(g);
      Graphics2D g2 = (Graphics2D) g;
      g2.transform(at);
      if (image != null) {  
         g.drawImage(image, 0, 0, this);  
      }  
}}